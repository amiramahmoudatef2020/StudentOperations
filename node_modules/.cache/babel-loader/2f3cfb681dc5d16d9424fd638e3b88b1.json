{"ast":null,"code":"import _objectSpread from \"/Users/amiraamhmoudatef/Desktop/StudentAppOperations/StudentOperations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { uid } from 'react-uid';\nimport * as ActionTypes from '../actions/ActionTypes';\nconst initialState = {\n  currentLoaded: [],\n  allContactsLength: 0,\n  allContacts: []\n};\n\nconst getContactIndexById = id => {\n  return this.props.contacts.findIndex(item => item.id === id);\n};\n\nconst ContactsReducer = (state = initialState, action) => {\n  if (action.type === ActionTypes.ADD_CONTACT) {\n    let newContact = {\n      id: uid(action.payload),\n      // fullName:`${action.payload.FirstName} ${action.payload.LastName}`,\n      firstName: action.payload.firstName,\n      lastName: action.payload.lastName,\n      category: action.payload.category,\n      phone: ` +${action.payload.prefix}  ${action.payload.phone}`,\n      birthDate: action.payload.datePicker.format('YYYY-MM-DD'),\n      isSelected: false\n    };\n    localStorage.setItem('contactsData', JSON.stringify([...state.allContacts, newContact]));\n    return _objectSpread({}, state, {\n      allContacts: [...state.allContacts, newContact],\n      allContactsLength: state.allContacts.length + 1\n    });\n  } else if (action.type === ActionTypes.UPDATE_CONTACT) {\n    let contactIndex = state.allContacts.findIndex(item => item.id === action.payload.id);\n    state.allContacts[contactIndex] = {\n      id: action.payload.id,\n      firstName: action.payload.firstName,\n      lastName: action.payload.lastName,\n      category: action.payload.category,\n      phone: `${action.payload.phone}`,\n      birthDate: action.payload.datePicker ? action.payload.datePicker.format('YYYY-MM-DD') : action.payload.birthDate,\n      isSelected: action.payload.isSelected\n    };\n    localStorage.setItem('contactsData', JSON.stringify(state.allContacts));\n    return _objectSpread({}, state, {\n      allContacts: [...state.allContacts]\n    });\n  } else if (action.type === ActionTypes.DELETE_CONTACTS) {\n    let filteredContacts = state.allContacts.filter(item => !item.isSelected);\n    localStorage.setItem('contactsData', JSON.stringify(filteredContacts));\n    return _objectSpread({}, state, {\n      allContacts: [...filteredContacts],\n      allContactsLength: filteredContacts.length\n    });\n  } else if (action.type === ActionTypes.SORT_ASC) {\n    state.allContacts.sort((a, b) => {\n      if (a[action.payload.key] < b[action.payload.key]) {\n        return -1;\n      } else if (a[action.payload.key] > b[action.payload.key]) {\n        return 1;\n      } else return 0;\n    });\n    localStorage.setItem('contactsData', JSON.stringify(state.allContacts));\n    return _objectSpread({}, state, {\n      allContacts: [...state.allContacts],\n      allContactsLength: state.allContactsLength\n    });\n  } else if (action.type === ActionTypes.SORT_DESC) {\n    state.allContacts.sort((a, b) => {\n      if (a[action.payload.key] < b[action.payload.key]) {\n        return -1;\n      } else if (a[action.payload.key] > b[action.payload.key]) {\n        return 1;\n      } else return 0;\n    });\n    state.allContacts.reverse();\n    localStorage.setItem('contactsData', JSON.stringify(state.allContacts));\n    return _objectSpread({}, state, {\n      allContacts: [...state.allContacts],\n      allContactsLength: state.allContactsLength\n    });\n  } else if (action.type === ActionTypes.LOAD_FILTERED_CONTACTS) {\n    let storedContacts = JSON.parse(localStorage.getItem('contactsData'));\n\n    if (storedContacts) {\n      state.allContacts = storedContacts;\n      state.allContactsLength = storedContacts.length;\n    }\n\n    let filteredData = [];\n    let pageSize = Number(action.payload.pageSize);\n    let pageNumber = action.payload.pageNumber;\n    let startIndex = (pageNumber - 1) * pageSize;\n    let endIndex = startIndex + pageSize;\n    endIndex = endIndex > state.allContactsLength ? state.allContactsLength : endIndex;\n\n    if (storedContacts) {\n      for (let i = startIndex; i < endIndex; i++) {\n        filteredData.push(state.allContacts[i]);\n      }\n\n      return _objectSpread({}, state, {\n        allContacts: [...state.allContacts],\n        currentLoaded: [...filteredData],\n        allContactsLength: state.allContactsLength\n      });\n    } else {\n      return _objectSpread({}, state);\n    }\n  }\n\n  return state;\n};\n\nexport default ContactsReducer;","map":{"version":3,"sources":["/Users/amiraamhmoudatef/Desktop/StudentAppOperations/StudentOperations/src/store/reducers/ContactsReducer.js"],"names":["uid","ActionTypes","initialState","currentLoaded","allContactsLength","allContacts","getContactIndexById","id","props","contacts","findIndex","item","ContactsReducer","state","action","type","ADD_CONTACT","newContact","payload","firstName","lastName","category","phone","prefix","birthDate","datePicker","format","isSelected","localStorage","setItem","JSON","stringify","length","UPDATE_CONTACT","contactIndex","DELETE_CONTACTS","filteredContacts","filter","SORT_ASC","sort","a","b","key","SORT_DESC","reverse","LOAD_FILTERED_CONTACTS","storedContacts","parse","getItem","filteredData","pageSize","Number","pageNumber","startIndex","endIndex","i","push"],"mappings":"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","sourcesContent":["import {uid} from 'react-uid';\r\nimport * as ActionTypes from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    currentLoaded: [],\r\n    allContactsLength: 0,\r\n    allContacts: [\r\n    ]\r\n}\r\n\r\nconst getContactIndexById = (id) => {\r\n    return this.props.contacts.findIndex((item) => item.id === id);\r\n}\r\n\r\nconst ContactsReducer = (state = initialState, action) => {\r\n    if (action.type === ActionTypes.ADD_CONTACT) {\r\n        let newContact={\r\n            id: uid(action.payload),\r\n            // fullName:`${action.payload.FirstName} ${action.payload.LastName}`,\r\n            firstName: action.payload.firstName,\r\n            lastName: action.payload.lastName,\r\n            category: action.payload.category,\r\n            phone: ` +${action.payload.prefix}  ${action.payload.phone}`,\r\n            birthDate: action.payload.datePicker.format('YYYY-MM-DD'),\r\n            isSelected: false\r\n        }\r\n        localStorage.setItem('contactsData', JSON.stringify([...state.allContacts,newContact]));\r\n        return {\r\n            ...state,\r\n            allContacts: [...state.allContacts,newContact],\r\n            allContactsLength: state.allContacts.length + 1\r\n        }\r\n    } else if (action.type === ActionTypes.UPDATE_CONTACT) {\r\n\r\n        let contactIndex = state.allContacts.findIndex((item) => item.id === action.payload.id);\r\n        state.allContacts[contactIndex] = {\r\n            id: action.payload.id,\r\n            firstName: action.payload.firstName,\r\n            lastName: action.payload.lastName,\r\n            category: action.payload.category,\r\n            phone: `${action.payload.phone}`,\r\n            birthDate: action.payload.datePicker ? action.payload.datePicker.format('YYYY-MM-DD'): action.payload.birthDate,\r\n            isSelected: action.payload.isSelected\r\n        }\r\n        localStorage.setItem('contactsData', JSON.stringify(state.allContacts));\r\n        return {\r\n            ...state,\r\n            allContacts: [...state.allContacts]\r\n        }\r\n    } else if (action.type === ActionTypes.DELETE_CONTACTS) {\r\n\r\n        let filteredContacts = state.allContacts.filter((item) => !item.isSelected);\r\n        localStorage.setItem('contactsData', JSON.stringify(filteredContacts));\r\n        return {\r\n            ...state,\r\n            allContacts: [...filteredContacts],\r\n            allContactsLength: filteredContacts.length\r\n        }\r\n    } else if (action.type === ActionTypes.SORT_ASC) {\r\n\r\n        state.allContacts.sort((a, b) => {\r\n            if(a[action.payload.key] < b[action.payload.key]) {\r\n                return -1;\r\n            } else if (a[action.payload.key] > b[action.payload.key]) {\r\n                return 1;\r\n            } else return 0;\r\n        });\r\n        localStorage.setItem('contactsData', JSON.stringify(state.allContacts));\r\n        return {\r\n            ...state,\r\n            allContacts: [...state.allContacts],\r\n            allContactsLength: state.allContactsLength\r\n        }\r\n    } else if (action.type === ActionTypes.SORT_DESC) {\r\n\r\n        state.allContacts.sort((a, b) => {\r\n            if(a[action.payload.key] < b[action.payload.key]) {\r\n                return -1;\r\n            } else if (a[action.payload.key] > b[action.payload.key]) {\r\n                return 1;\r\n            } else return 0;\r\n        });\r\n        state.allContacts.reverse();\r\n        localStorage.setItem('contactsData', JSON.stringify(state.allContacts));\r\n        return {\r\n            ...state,\r\n            allContacts: [...state.allContacts],\r\n            allContactsLength: state.allContactsLength\r\n        }\r\n    } else if (action.type === ActionTypes.LOAD_FILTERED_CONTACTS) {\r\n\r\n        let storedContacts = JSON.parse(localStorage.getItem('contactsData'));\r\n        if(storedContacts){\r\n            state.allContacts = storedContacts;\r\n            state.allContactsLength = storedContacts.length;\r\n        }\r\n\r\n        let filteredData = [];\r\n        let pageSize = (Number)(action.payload.pageSize);\r\n        let pageNumber = action.payload.pageNumber;\r\n        let startIndex = ( ( pageNumber - 1 ) * pageSize );\r\n        let endIndex = startIndex + pageSize;\r\n        endIndex = endIndex > state.allContactsLength ? state.allContactsLength : endIndex;\r\n\r\n        \r\n        \r\n        if(storedContacts) {\r\n            for(let i = startIndex; i < endIndex ; i++) {\r\n                filteredData.push(state.allContacts[i]);\r\n            } \r\n            return {\r\n                ...state,\r\n                allContacts: [...state.allContacts],\r\n                currentLoaded: [...filteredData],\r\n                allContactsLength: state.allContactsLength\r\n            }\r\n        } else {\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default ContactsReducer;"]},"metadata":{},"sourceType":"module"}