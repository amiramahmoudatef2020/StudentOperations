{"ast":null,"code":"import _objectSpread from \"/Users/amiraamhmoudatef/Desktop/StudentAppOperations/StudentOperations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/amiraamhmoudatef/Desktop/StudentAppOperations/StudentOperations/src/components/Form/Form.js\";\nimport React from \"react\";\nimport { Form, Input, Select, DatePicker, Button, Cascader } from \"antd\";\nimport { connect } from \"react-redux\";\nimport * as ActionCreators from \"../../store/actions/ActionCreators\";\nimport moment from \"moment\";\nconst Option = Select.Option;\nconst residences = [{\n  value: \"progress\",\n  label: \"Academic progress\",\n  children: [{\n    value: 'Fail',\n    label: 'Fail'\n  }, {\n    value: 'Good',\n    label: 'Good'\n  }, {\n    value: 'Excellent',\n    label: 'Excellent'\n  }]\n}];\n\nclass ContactForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log(\"Received values of form: \", values);\n          if (!this.props.currentSelectedContact) this.props.addNewContact(values);else this.props.updateExistingContact(_objectSpread({\n            id: this.props.currentSelectedContact.id\n          }, values)); // this.props.showModal()\n\n          this.props.form.resetFields();\n          this.props.hideModal();\n          this.props.refreshList();\n        }\n      });\n    };\n\n    this.getFieldValue = fieldName => {\n      if (this.props.currentSelectedContact) {\n        return this.props.currentSelectedContact[fieldName];\n      } else return \"\";\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator(\"prefix\", {\n      initialValue: \"86\"\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"60\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"+60\"), React.createElement(Option, {\n      value: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"+20\")));\n    const config = {\n      rules: [{\n        type: \"object\",\n        required: true,\n        message: \"Please select time!\"\n      }]\n    };\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"First Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, getFieldDecorator(\"firstName\", {\n      initialValue: this.getFieldValue('firstName'),\n      rules: [{\n        message: \"The input is not valid First Name\"\n      }, {\n        required: true,\n        message: \"Please input your First Name\"\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Family Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, getFieldDecorator(\"lastName\", {\n      initialValue: this.getFieldValue('lastName'),\n      rules: [{\n        message: \"The input is not valid Family Name\"\n      }, {\n        required: true,\n        message: \"Please input your Family Name\"\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, getFieldDecorator(\"phone\", {\n      initialValue: this.getFieldValue('phone'),\n      rules: [{\n        required: true,\n        message: \"Please input your phone number!\"\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Birth Date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, getFieldDecorator(\"datePicker\", {\n      initialValue: this.props.currentSelectedContact ? moment(this.props.currentSelectedContact.birthDate) : moment()\n    }, config)(React.createElement(DatePicker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Academic progress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, getFieldDecorator('Academic progress', {\n      initialValue: this.props.currentSelectedContact ? this.props.currentSelectedContact.progress : ['progress', 'Fail']\n    })(React.createElement(Cascader, {\n      options: residences,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Register\")), React.createElement(\"div\", {\n      className: \"col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.props.hideModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Cancel\")))));\n  }\n\n} // const MapStateToProps = state => {\n//     return {\n//       contacts: state.Contacts.currentLoaded,\n//       allContactsLength: state.Contacts.allContactsLength\n//     };\n//   };\n\n\nconst MapDispatcherToProps = Dispatcher => {\n  return {\n    addNewContact: newContact => Dispatcher(ActionCreators.addContact(newContact)),\n    updateExistingContact: updatedContact => Dispatcher(ActionCreators.updateContact(updatedContact))\n  };\n};\n\nexport const CustomForm = connect(\n/*MapStateToProps*/\nnull, MapDispatcherToProps)(Form.create({\n  name: \"ContactForm\"\n})(ContactForm));","map":{"version":3,"sources":["/Users/amiraamhmoudatef/Desktop/StudentAppOperations/StudentOperations/src/components/Form/Form.js"],"names":["React","Form","Input","Select","DatePicker","Button","Cascader","connect","ActionCreators","moment","Option","residences","value","label","children","ContactForm","Component","state","confirmDirty","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","currentSelectedContact","addNewContact","updateExistingContact","id","resetFields","hideModal","refreshList","getFieldValue","fieldName","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","config","rules","type","required","message","birthDate","progress","MapDispatcherToProps","Dispatcher","newContact","addContact","updatedContact","updateContact","CustomForm","create","name"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Form, Input, Select, DatePicker, Button ,Cascader } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport * as ActionCreators from \"../../store/actions/ActionCreators\";\r\nimport moment from \"moment\";\r\nconst { Option } = Select;\r\n\r\nconst residences = [\r\n  {\r\n    value: \"progress\",\r\n    label: \"Academic progress\",\r\n    children: [\r\n        {\r\n          value: 'Fail',\r\n          label: 'Fail',\r\n        },\r\n        {\r\n          value: 'Good',\r\n          label: 'Good',\r\n        },\r\n        {\r\n            value: 'Excellent',\r\n            label: 'Excellent',\r\n          },\r\n       \r\n      ],\r\n  },\r\n \r\n];\r\n\r\nclass ContactForm extends React.Component {\r\n  state = {\r\n    confirmDirty: false\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        console.log(\"Received values of form: \", values);\r\n        if(!this.props.currentSelectedContact)\r\n          this.props.addNewContact(values)\r\n        else\r\n          this.props.updateExistingContact({id: this.props.currentSelectedContact.id , ...values})\r\n        // this.props.showModal()\r\n        this.props.form.resetFields()\r\n        this.props.hideModal();\r\n        this.props.refreshList();\r\n      }\r\n    });\r\n  };\r\n\r\n  getFieldValue = (fieldName) => {\r\n    if(this.props.currentSelectedContact) {\r\n      return this.props.currentSelectedContact[fieldName];\r\n    } else return \"\"\r\n  }\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 }\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 }\r\n      }\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8\r\n        }\r\n      }\r\n    };\r\n    const prefixSelector = getFieldDecorator(\"prefix\", {\r\n      initialValue: \"86\"\r\n    })(\r\n      <Select style={{ width: 70 }}>\r\n        <Option value=\"60\">+60</Option>\r\n        <Option value=\"20\">+20</Option>\r\n      </Select>\r\n    );\r\n\r\n    const config = {\r\n      rules: [\r\n        { type: \"object\", required: true, message: \"Please select time!\" }\r\n      ]\r\n    };\r\n\r\n    return (\r\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n        <Form.Item label=\"First Name\">\r\n          {getFieldDecorator(\"firstName\", {\r\n            initialValue: this.getFieldValue('firstName'),\r\n            rules: [\r\n              {\r\n                message: \"The input is not valid First Name\"\r\n              },\r\n              {\r\n                required: true,\r\n                message: \"Please input your First Name\"\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Family Name\">\r\n          {getFieldDecorator(\"lastName\", {\r\n            initialValue:  this.getFieldValue('lastName'),\r\n            rules: [\r\n              {\r\n                message: \"The input is not valid Family Name\"\r\n              },\r\n              {\r\n                required: true,\r\n                message: \"Please input your Family Name\"\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Phone Number\">\r\n          {getFieldDecorator(\"phone\", {\r\n            initialValue:  this.getFieldValue('phone'),\r\n            rules: [\r\n              { required: true, message: \"Please input your phone number!\" }\r\n            ]\r\n          })(<Input addonBefore={prefixSelector} style={{ width: \"100%\" }} />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Birth Date\">\r\n          {getFieldDecorator(\r\n            \"datePicker\",\r\n            { initialValue:  this.props.currentSelectedContact ? moment(this.props.currentSelectedContact.birthDate) : moment() },\r\n            config\r\n          )(<DatePicker />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Academic progress\">\r\n          {getFieldDecorator('Academic progress', {\r\n            initialValue: this.props.currentSelectedContact ?  this.props.currentSelectedContact.progress :  ['progress', 'Fail'],\r\n          })(<Cascader options={residences} />)}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <div className=\"row\">\r\n            <div className=\"col-auto\">\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Register\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-auto\">\r\n              <Button type=\"primary\" onClick={this.props.hideModal}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\n// const MapStateToProps = state => {\r\n//     return {\r\n//       contacts: state.Contacts.currentLoaded,\r\n//       allContactsLength: state.Contacts.allContactsLength\r\n//     };\r\n//   };\r\n  \r\n  const MapDispatcherToProps = Dispatcher => {\r\n    return {\r\n      addNewContact: (newContact) =>\r\n        Dispatcher(ActionCreators.addContact(newContact)),\r\n      updateExistingContact: (updatedContact) => \r\n        Dispatcher(ActionCreators.updateContact(updatedContact)),\r\n    };\r\n  };\r\n  \r\n   export const CustomForm = connect(/*MapStateToProps*/null, MapDispatcherToProps)( Form.create({ name: \"ContactForm\" })(ContactForm));"]},"metadata":{},"sourceType":"module"}