{"ast":null,"code":"import _objectSpread from \"/Users/amiraamhmoudatef/Desktop/StudentAppOperations/StudentOperations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/amiraamhmoudatef/Desktop/StudentAppOperations/StudentOperations/src/views/StudentsList/StudentsList.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as ActionCreators from \"../../store/actions/ActionCreators\";\nimport { Button } from \"antd\";\nimport { CustomForm, CustomModal, CardsListing } from \"../../components/index\";\n\nclass ContactsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onPageChange = (pageNumber, pageSize) => {\n      this.setState({\n        currentPage: pageNumber\n      });\n      this.props.getFilteredData(pageSize, pageNumber);\n    };\n\n    this.onPageSizeChange = (current, size) => {\n      this.setState((prevState, props) => ({\n        currentPage: 1,\n        currentPageSizeIndex: prevState.availablePageSizes.findIndex(item => {\n          return item == size;\n        })\n      }));\n      this.props.getFilteredData(size, 1);\n    };\n\n    this.getFilteredData = currentPage => {\n      console.log(currentPage, this.getCurrentPageSize());\n      this.props.getFilteredData(this.getCurrentPageSize(), currentPage ? currentPage : this.state.currentPage);\n    };\n\n    this.showModal = () => {\n      console.log(\"hellodsadsadsa\");\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = e => {\n      this.setState({\n        showModal: false,\n        currentSelectedContact: null\n      });\n    };\n\n    this.onContactItemClick = id => {\n      this.showModal();\n      this.setState({\n        currentSelectedContact: _objectSpread({}, this.getContactById(id))\n      });\n    };\n\n    this.getContactById = id => {\n      return this.props.contacts.find(item => item.id === id);\n    };\n\n    this.onContactStatusChanged = (isSelected, itemId) => {\n      let item = this.getContactById(itemId);\n      this.props.updateExistingContact(_objectSpread({}, item, {\n        isSelected\n      }));\n    };\n\n    this.refreshList = () => {\n      this.getFilteredData(1);\n      this.setState({\n        currentSelectedContact: null\n      });\n    };\n\n    this.deleteSelectedContacts = () => {\n      this.props.deleteSelectedContacts();\n      this.refreshList();\n      this.setState({\n        currentPage: 1\n      }); // this.props.getFilteredData(\n      //   this.getCurrentPageSize(),\n      //   1\n      // );\n      // this.setState({\n      //   currentSelectedContact: null\n      // })\n    };\n\n    this.state = {\n      currentPageSizeIndex: 0,\n      availablePageSizes: [\"2\", \"10\", \"15\"],\n      pagesNumber: 0,\n      currentPage: 1,\n      showModal: false,\n      currentSelectedContact: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFilteredData(this.getCurrentPageSize(), this.state.currentPage);\n    document.querySelector('meta[property=\"og:title\"]').setAttribute(\"content\", \"amira\");\n  }\n\n  getCurrentPageSize() {\n    return this.state.availablePageSizes[this.state.currentPageSizeIndex];\n  }\n\n  sortContactsASC(key) {\n    this.props.sortASC(key);\n    this.refreshList();\n  }\n\n  sortContactsDESC(key) {\n    this.props.sortDESC(key);\n    this.refreshList();\n  }\n\n  render() {\n    // const { showModal } = this.state;\n    // console.log(this.state.currentPageSizeIndex)\n    return React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row my-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => this.showModal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Add New Contact\")), React.createElement(\"div\", {\n      className: \"col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => this.deleteSelectedContacts(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Delete all selected contacts\")), React.createElement(\"div\", {\n      className: \"row col-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => this.sortContactsASC('firstName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Sort ASC by first name\")), React.createElement(\"div\", {\n      className: \"col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => this.sortContactsDESC('firstName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Sort DESC by first name\"))), React.createElement(\"div\", {\n      className: \"row col-6 my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => this.sortContactsASC('lastName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Sort ASC by family name\")), React.createElement(\"div\", {\n      className: \"col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => this.sortContactsDESC('lastName'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Sort DESC by family name\")))), React.createElement(CustomModal, {\n      title: this.state.currentSelectedContact ? \"Edit contact\" : \"Add new Contact\",\n      visible: this.state.showModal,\n      onOkHandler: this.hideModal,\n      onCancelHandler: this.hideModal,\n      mode: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(CustomForm, {\n      showModal: () => this.showModal(),\n      hideModal: () => this.hideModal(),\n      refreshList: () => this.refreshList(),\n      currentSelectedContact: this.state.currentSelectedContact,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })), React.createElement(CardsListing, {\n      dataList: this.props.contacts,\n      allDataListLength: this.props.allContactsLength,\n      currentPage: this.state.currentPage,\n      pageSize: Number(this.getCurrentPageSize()),\n      availablePageSizes: this.state.availablePageSizes,\n      onPageChange: this.onPageChange,\n      onPageSizeChange: this.onPageSizeChange,\n      getFilteredDataFn: this.getFilteredData,\n      onItemClick: id => this.onContactItemClick(id),\n      onContactStatusChange: (isSelected, itemId) => this.onContactStatusChanged(isSelected, itemId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst MapStateToProps = state => {\n  return {\n    contacts: state.Contacts.currentLoaded,\n    allContactsLength: state.Contacts.allContactsLength\n  };\n};\n\nconst MapDispatcherToProps = Dispatcher => {\n  return {\n    getFilteredData: (pageSize, pageNumber) => Dispatcher(ActionCreators.getFilteredContacts(pageSize, pageNumber)),\n    updateExistingContact: updatedContact => Dispatcher(ActionCreators.updateContact(updatedContact)),\n    deleteSelectedContacts: () => Dispatcher(ActionCreators.deleteContacts()),\n    sortASC: key => Dispatcher(ActionCreators.sortContactsASC(key)),\n    sortDESC: key => Dispatcher(ActionCreators.sortContactsDESC(key))\n  };\n};\n\nexport default connect(MapStateToProps, MapDispatcherToProps)(ContactsList);","map":{"version":3,"sources":["/Users/amiraamhmoudatef/Desktop/StudentAppOperations/StudentOperations/src/views/StudentsList/StudentsList.js"],"names":["React","Component","connect","ActionCreators","Button","CustomForm","CustomModal","CardsListing","ContactsList","constructor","props","onPageChange","pageNumber","pageSize","setState","currentPage","getFilteredData","onPageSizeChange","current","size","prevState","currentPageSizeIndex","availablePageSizes","findIndex","item","console","log","getCurrentPageSize","state","showModal","hideModal","e","currentSelectedContact","onContactItemClick","id","getContactById","contacts","find","onContactStatusChanged","isSelected","itemId","updateExistingContact","refreshList","deleteSelectedContacts","pagesNumber","componentDidMount","document","querySelector","setAttribute","sortContactsASC","key","sortASC","sortContactsDESC","sortDESC","render","allContactsLength","Number","MapStateToProps","Contacts","currentLoaded","MapDispatcherToProps","Dispatcher","getFilteredContacts","updatedContact","updateContact","deleteContacts"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as ActionCreators from \"../../store/actions/ActionCreators\";\r\nimport { Button } from \"antd\";\r\nimport  {CustomForm, CustomModal, CardsListing }  from \"../../components/index\";\r\n\r\nclass ContactsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentPageSizeIndex: 0,\r\n      availablePageSizes: [\"2\", \"10\", \"15\"],\r\n      pagesNumber: 0,\r\n      currentPage: 1,\r\n      showModal: false,\r\n      currentSelectedContact: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.props.getFilteredData(\r\n        this.getCurrentPageSize(),\r\n        this.state.currentPage\r\n      );\r\n      document.querySelector('meta[property=\"og:title\"]').setAttribute(\"content\", \"amira\");\r\n\r\n  }\r\n\r\n  getCurrentPageSize() {\r\n    return this.state.availablePageSizes[this.state.currentPageSizeIndex];\r\n  }\r\n\r\n  onPageChange = (pageNumber, pageSize) => {\r\n    this.setState({\r\n      currentPage: pageNumber\r\n    });\r\n    this.props.getFilteredData(pageSize, pageNumber);\r\n  };\r\n\r\n  onPageSizeChange = (current, size) => {\r\n    this.setState((prevState, props) => ({\r\n      currentPage: 1,\r\n      currentPageSizeIndex: prevState.availablePageSizes.findIndex((item) => {\r\n        return item == size;\r\n      })\r\n    }));\r\n    this.props.getFilteredData(size, 1);\r\n  };\r\n\r\n  getFilteredData = (currentPage) => {\r\n    console.log(currentPage,  this.getCurrentPageSize())\r\n    this.props.getFilteredData(\r\n      this.getCurrentPageSize(),\r\n      currentPage? currentPage : this.state.currentPage\r\n    );\r\n  };\r\n  showModal = () => {\r\n      console.log(\"hellodsadsadsa\")\r\n    this.setState({ showModal: true });\r\n  };\r\n\r\n  hideModal = (e) => {\r\n    this.setState({ showModal: false, currentSelectedContact: null });\r\n  };\r\n\r\n  onContactItemClick = (id) => {\r\n      this.showModal();\r\n      this.setState({\r\n        currentSelectedContact: { ... this.getContactById(id) }\r\n      })\r\n  }\r\n\r\n  getContactById = (id) => {\r\n    return this.props.contacts.find((item) => item.id === id);\r\n  }\r\n\r\n  onContactStatusChanged = (isSelected, itemId) => {\r\n    let item = this.getContactById(itemId);\r\n      this.props.updateExistingContact({\r\n        ... item,\r\n        isSelected\r\n      })\r\n  }\r\n\r\n  refreshList = () => {\r\n    this.getFilteredData(1);\r\n    this.setState({\r\n      currentSelectedContact: null\r\n    })\r\n  }\r\n\r\n  deleteSelectedContacts = () => {\r\n    this.props.deleteSelectedContacts();\r\n    this.refreshList();\r\n    this.setState({\r\n      currentPage: 1\r\n    })\r\n    // this.props.getFilteredData(\r\n    //   this.getCurrentPageSize(),\r\n    //   1\r\n    // );\r\n    // this.setState({\r\n    //   currentSelectedContact: null\r\n    // })\r\n  }\r\n\r\n  sortContactsASC(key) {\r\n    this.props.sortASC(key);\r\n    this.refreshList();\r\n  }\r\n\r\n  sortContactsDESC(key) {\r\n    this.props.sortDESC(key);\r\n    this.refreshList();\r\n  }\r\n\r\n  render() {\r\n    // const { showModal } = this.state;\r\n    // console.log(this.state.currentPageSizeIndex)\r\n    return (\r\n      <div className=\"col-12\">\r\n        <div className=\"row my-5\">\r\n          <div className=\"col-auto\">\r\n            <Button type=\"primary\" onClick={() => this.showModal()}>\r\n              Add New Contact\r\n            </Button>\r\n          </div>\r\n          <div className=\"col-auto\">\r\n          <Button type=\"primary\" onClick={() => this.deleteSelectedContacts()}>\r\n          Delete all selected contacts\r\n          </Button>\r\n          </div>\r\n          \r\n          <div className=\"row col-6\">\r\n            <div className=\"col-auto\">\r\n              <Button type=\"primary\" onClick={() => this.sortContactsASC('firstName')}>\r\n                  Sort ASC by first name\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-auto\">\r\n            <Button type=\"primary\" onClick={() => this.sortContactsDESC('firstName')}>\r\n                Sort DESC by first name\r\n            </Button>\r\n          </div>\r\n          </div>\r\n\r\n          <div className=\"row col-6 my-3\">\r\n            <div className=\"col-auto\">\r\n              <Button type=\"primary\" onClick={() => this.sortContactsASC('lastName')}>\r\n                  Sort ASC by family name\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-auto\">\r\n              <Button type=\"primary\" onClick={() => this.sortContactsDESC('lastName')}>\r\n                  Sort DESC by family name\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          \r\n\r\n        </div>\r\n        <CustomModal\r\n          title={this.state.currentSelectedContact ? \"Edit contact\" : \"Add new Contact\"}\r\n          visible={this.state.showModal}\r\n          onOkHandler={this.hideModal}\r\n          onCancelHandler={this.hideModal}\r\n          mode=\"\"\r\n        >\r\n          <CustomForm \r\n              showModal={()=>this.showModal()}\r\n              hideModal={()=>this.hideModal()}\r\n              refreshList={() => this.refreshList()}\r\n              currentSelectedContact={this.state.currentSelectedContact}\r\n               />\r\n        </CustomModal>\r\n        <CardsListing\r\n          dataList={this.props.contacts}\r\n          allDataListLength={this.props.allContactsLength}\r\n          currentPage={this.state.currentPage}\r\n          pageSize={Number(this.getCurrentPageSize())}\r\n          availablePageSizes={this.state.availablePageSizes}\r\n          onPageChange={this.onPageChange}\r\n          onPageSizeChange={this.onPageSizeChange}\r\n          getFilteredDataFn={this.getFilteredData}\r\n          onItemClick={(id) => this.onContactItemClick(id)}\r\n          onContactStatusChange={(isSelected, itemId) => this.onContactStatusChanged(isSelected, itemId)}\r\n        ></CardsListing>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst MapStateToProps = state => {\r\n  return {\r\n    contacts: state.Contacts.currentLoaded,\r\n    allContactsLength: state.Contacts.allContactsLength,\r\n  };\r\n};\r\n\r\nconst MapDispatcherToProps = Dispatcher => {\r\n  return {\r\n    getFilteredData: (pageSize, pageNumber) =>\r\n      Dispatcher(ActionCreators.getFilteredContacts(pageSize, pageNumber)),\r\n    updateExistingContact: (updatedContact) => \r\n      Dispatcher(ActionCreators.updateContact(updatedContact)),\r\n    deleteSelectedContacts: () => Dispatcher(ActionCreators.deleteContacts()),\r\n    sortASC: (key) => Dispatcher(ActionCreators.sortContactsASC(key)),\r\n    sortDESC: (key) => Dispatcher(ActionCreators.sortContactsDESC(key)),\r\n  };\r\n};\r\n\r\nexport default connect(MapStateToProps, MapDispatcherToProps)(ContactsList);\r\n"]},"metadata":{},"sourceType":"module"}